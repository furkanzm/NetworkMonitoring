// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitoring.proto

#include "monitoring.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mon {
constexpr DiskValue::DiskValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(int64_t{0})
  , w_(int64_t{0})
  , rw_(int64_t{0}){}
struct DiskValueDefaultTypeInternal {
  constexpr DiskValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskValueDefaultTypeInternal() {}
  union {
    DiskValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskValueDefaultTypeInternal _DiskValue_default_instance_;
constexpr DiskResponse::DiskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct DiskResponseDefaultTypeInternal {
  constexpr DiskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskResponseDefaultTypeInternal() {}
  union {
    DiskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskResponseDefaultTypeInternal _DiskResponse_default_instance_;
constexpr AllDiskResponse::AllDiskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resp_(){}
struct AllDiskResponseDefaultTypeInternal {
  constexpr AllDiskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllDiskResponseDefaultTypeInternal() {}
  union {
    AllDiskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllDiskResponseDefaultTypeInternal _AllDiskResponse_default_instance_;
constexpr DiskQ::DiskQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DiskQDefaultTypeInternal {
  constexpr DiskQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskQDefaultTypeInternal() {}
  union {
    DiskQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskQDefaultTypeInternal _DiskQ_default_instance_;
constexpr IfaceQ::IfaceQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IfaceQDefaultTypeInternal {
  constexpr IfaceQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IfaceQDefaultTypeInternal() {}
  union {
    IfaceQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IfaceQDefaultTypeInternal _IfaceQ_default_instance_;
constexpr IfaceValue::IfaceValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(int64_t{0})
  , w_(int64_t{0})
  , rw_(int64_t{0}){}
struct IfaceValueDefaultTypeInternal {
  constexpr IfaceValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IfaceValueDefaultTypeInternal() {}
  union {
    IfaceValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IfaceValueDefaultTypeInternal _IfaceValue_default_instance_;
constexpr IfaceResponse::IfaceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct IfaceResponseDefaultTypeInternal {
  constexpr IfaceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IfaceResponseDefaultTypeInternal() {}
  union {
    IfaceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IfaceResponseDefaultTypeInternal _IfaceResponse_default_instance_;
constexpr AllIfaceResponses::AllIfaceResponses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iface_(){}
struct AllIfaceResponsesDefaultTypeInternal {
  constexpr AllIfaceResponsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllIfaceResponsesDefaultTypeInternal() {}
  union {
    AllIfaceResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllIfaceResponsesDefaultTypeInternal _AllIfaceResponses_default_instance_;
constexpr FreeMemory::FreeMemory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct FreeMemoryDefaultTypeInternal {
  constexpr FreeMemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreeMemoryDefaultTypeInternal() {}
  union {
    FreeMemory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreeMemoryDefaultTypeInternal _FreeMemory_default_instance_;
constexpr UsedMemory::UsedMemory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct UsedMemoryDefaultTypeInternal {
  constexpr UsedMemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsedMemoryDefaultTypeInternal() {}
  union {
    UsedMemory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsedMemoryDefaultTypeInternal _UsedMemory_default_instance_;
constexpr CachedMemory::CachedMemory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct CachedMemoryDefaultTypeInternal {
  constexpr CachedMemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CachedMemoryDefaultTypeInternal() {}
  union {
    CachedMemory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CachedMemoryDefaultTypeInternal _CachedMemory_default_instance_;
constexpr SwapMemory::SwapMemory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct SwapMemoryDefaultTypeInternal {
  constexpr SwapMemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapMemoryDefaultTypeInternal() {}
  union {
    SwapMemory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapMemoryDefaultTypeInternal _SwapMemory_default_instance_;
constexpr TotalMemory::TotalMemory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct TotalMemoryDefaultTypeInternal {
  constexpr TotalMemoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TotalMemoryDefaultTypeInternal() {}
  union {
    TotalMemory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TotalMemoryDefaultTypeInternal _TotalMemory_default_instance_;
constexpr CpuResponse::CpuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct CpuResponseDefaultTypeInternal {
  constexpr CpuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CpuResponseDefaultTypeInternal() {}
  union {
    CpuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CpuResponseDefaultTypeInternal _CpuResponse_default_instance_;
}  // namespace mon
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_monitoring_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_monitoring_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_monitoring_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_monitoring_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::DiskValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::DiskValue, r_),
  PROTOBUF_FIELD_OFFSET(::mon::DiskValue, w_),
  PROTOBUF_FIELD_OFFSET(::mon::DiskValue, rw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::DiskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::DiskResponse, name_),
  PROTOBUF_FIELD_OFFSET(::mon::DiskResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::AllDiskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::AllDiskResponse, resp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::DiskQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::DiskQ, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceQ, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceValue, r_),
  PROTOBUF_FIELD_OFFSET(::mon::IfaceValue, w_),
  PROTOBUF_FIELD_OFFSET(::mon::IfaceValue, rw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::IfaceResponse, name_),
  PROTOBUF_FIELD_OFFSET(::mon::IfaceResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::AllIfaceResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::AllIfaceResponses, iface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::FreeMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::FreeMemory, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::UsedMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::UsedMemory, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::CachedMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::CachedMemory, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::SwapMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::SwapMemory, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::TotalMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::TotalMemory, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mon::CpuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mon::CpuResponse, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mon::DiskValue)},
  { 9, -1, -1, sizeof(::mon::DiskResponse)},
  { 17, -1, -1, sizeof(::mon::AllDiskResponse)},
  { 24, -1, -1, sizeof(::mon::DiskQ)},
  { 31, -1, -1, sizeof(::mon::IfaceQ)},
  { 38, -1, -1, sizeof(::mon::IfaceValue)},
  { 47, -1, -1, sizeof(::mon::IfaceResponse)},
  { 55, -1, -1, sizeof(::mon::AllIfaceResponses)},
  { 62, -1, -1, sizeof(::mon::FreeMemory)},
  { 69, -1, -1, sizeof(::mon::UsedMemory)},
  { 76, -1, -1, sizeof(::mon::CachedMemory)},
  { 83, -1, -1, sizeof(::mon::SwapMemory)},
  { 90, -1, -1, sizeof(::mon::TotalMemory)},
  { 97, -1, -1, sizeof(::mon::CpuResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_DiskValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_DiskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_AllDiskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_DiskQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_IfaceQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_IfaceValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_IfaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_AllIfaceResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_FreeMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_UsedMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_CachedMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_SwapMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_TotalMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mon::_CpuResponse_default_instance_),
};

const char descriptor_table_protodef_monitoring_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020monitoring.proto\022\003mon\032\033google/protobuf"
  "/empty.proto\"-\n\tDiskValue\022\t\n\001r\030\001 \001(\003\022\t\n\001"
  "w\030\002 \001(\003\022\n\n\002rw\030\003 \001(\003\";\n\014DiskResponse\022\014\n\004n"
  "ame\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.mon.DiskValue"
  "\"2\n\017AllDiskResponse\022\037\n\004resp\030\001 \003(\0132\021.mon."
  "DiskResponse\"\025\n\005DiskQ\022\014\n\004name\030\001 \001(\t\"\026\n\006I"
  "faceQ\022\014\n\004name\030\001 \001(\t\".\n\nIfaceValue\022\t\n\001r\030\001"
  " \001(\003\022\t\n\001w\030\002 \001(\003\022\n\n\002rw\030\003 \001(\003\"=\n\rIfaceResp"
  "onse\022\014\n\004name\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.mon."
  "IfaceValue\"6\n\021AllIfaceResponses\022!\n\005iface"
  "\030\001 \003(\0132\022.mon.IfaceResponse\"\033\n\nFreeMemory"
  "\022\r\n\005value\030\001 \001(\003\"\033\n\nUsedMemory\022\r\n\005value\030\001"
  " \001(\003\"\035\n\014CachedMemory\022\r\n\005value\030\001 \001(\003\"\033\n\nS"
  "wapMemory\022\r\n\005value\030\001 \001(\003\"\034\n\013TotalMemory\022"
  "\r\n\005value\030\001 \001(\003\"\034\n\013CpuResponse\022\r\n\005value\030\001"
  " \003(\0022\371\002\n\016DiskMonitoring\0228\n\006GetBPS\022\026.goog"
  "le.protobuf.Empty\032\024.mon.AllDiskResponse\""
  "\000\022-\n\nGetDiskBPS\022\n.mon.DiskQ\032\021.mon.DiskRe"
  "sponse\"\000\0229\n\007GetIOPS\022\026.google.protobuf.Em"
  "pty\032\024.mon.AllDiskResponse\"\000\022.\n\013GetDiskIO"
  "PS\022\n.mon.DiskQ\032\021.mon.DiskResponse\"\000\022N\n\034G"
  "etRequestSizeInBytesPerRead\022\026.google.pro"
  "tobuf.Empty\032\024.mon.AllDiskResponse\"\000\022C\n G"
  "etDiskRequestSizeInBytesPerRead\022\n.mon.Di"
  "skQ\032\021.mon.DiskResponse\"\0002\237\002\n\021NetworkMoni"
  "toring\022E\n\021GetBytesPerSecond\022\026.google.pro"
  "tobuf.Empty\032\026.mon.AllIfaceResponses\"\000\022;\n"
  "\026GetIfaceBytesPerSecond\022\013.mon.IfaceQ\032\022.m"
  "on.IfaceResponse\"\000\022G\n\023GetPacketsPerSecon"
  "d\022\026.google.protobuf.Empty\032\026.mon.AllIface"
  "Responses\"\000\022=\n\030GetIfacePacketsPerSecond\022"
  "\013.mon.IfaceQ\032\022.mon.IfaceResponse\"\0002\304\002\n\020M"
  "emoryMonitoring\022:\n\rGetFreeMemory\022\026.googl"
  "e.protobuf.Empty\032\017.mon.FreeMemory\"\000\022:\n\rG"
  "etUsedMemory\022\026.google.protobuf.Empty\032\017.m"
  "on.UsedMemory\"\000\022>\n\017GetCachedMemory\022\026.goo"
  "gle.protobuf.Empty\032\021.mon.CachedMemory\"\000\022"
  ":\n\rGetSwapMemory\022\026.google.protobuf.Empty"
  "\032\017.mon.SwapMemory\"\000\022<\n\016GetTotalMemory\022\026."
  "google.protobuf.Empty\032\020.mon.TotalMemory\""
  "\0002Q\n\rCpuMonitoring\022@\n\022GetUsagePercentage"
  "\022\026.google.protobuf.Empty\032\020.mon.CpuRespon"
  "se\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_monitoring_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_monitoring_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_monitoring_2eproto = {
  false, false, 1692, descriptor_table_protodef_monitoring_2eproto, "monitoring.proto", 
  &descriptor_table_monitoring_2eproto_once, descriptor_table_monitoring_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_monitoring_2eproto::offsets,
  file_level_metadata_monitoring_2eproto, file_level_enum_descriptors_monitoring_2eproto, file_level_service_descriptors_monitoring_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_monitoring_2eproto_getter() {
  return &descriptor_table_monitoring_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_monitoring_2eproto(&descriptor_table_monitoring_2eproto);
namespace mon {

// ===================================================================

class DiskValue::_Internal {
 public:
};

DiskValue::DiskValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.DiskValue)
}
DiskValue::DiskValue(const DiskValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&rw_) -
    reinterpret_cast<char*>(&r_)) + sizeof(rw_));
  // @@protoc_insertion_point(copy_constructor:mon.DiskValue)
}

void DiskValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rw_) -
    reinterpret_cast<char*>(&r_)) + sizeof(rw_));
}

DiskValue::~DiskValue() {
  // @@protoc_insertion_point(destructor:mon.DiskValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiskValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiskValue::ArenaDtor(void* object) {
  DiskValue* _this = reinterpret_cast< DiskValue* >(object);
  (void)_this;
}
void DiskValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.DiskValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rw_) -
      reinterpret_cast<char*>(&r_)) + sizeof(rw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiskValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.DiskValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_r(), target);
  }

  // int64 w = 2;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_w(), target);
  }

  // int64 rw = 3;
  if (this->_internal_rw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_rw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.DiskValue)
  return target;
}

size_t DiskValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.DiskValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_r());
  }

  // int64 w = 2;
  if (this->_internal_w() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_w());
  }

  // int64 rw = 3;
  if (this->_internal_rw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_rw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiskValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskValue::GetClassData() const { return &_class_data_; }

void DiskValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiskValue *>(to)->MergeFrom(
      static_cast<const DiskValue &>(from));
}


void DiskValue::MergeFrom(const DiskValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.DiskValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from._internal_w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from._internal_rw() != 0) {
    _internal_set_rw(from._internal_rw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskValue::CopyFrom(const DiskValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.DiskValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskValue::IsInitialized() const {
  return true;
}

void DiskValue::InternalSwap(DiskValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiskValue, rw_)
      + sizeof(DiskValue::rw_)
      - PROTOBUF_FIELD_OFFSET(DiskValue, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[0]);
}

// ===================================================================

class DiskResponse::_Internal {
 public:
  static const ::mon::DiskValue& value(const DiskResponse* msg);
};

const ::mon::DiskValue&
DiskResponse::_Internal::value(const DiskResponse* msg) {
  return *msg->value_;
}
DiskResponse::DiskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.DiskResponse)
}
DiskResponse::DiskResponse(const DiskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::mon::DiskValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mon.DiskResponse)
}

void DiskResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

DiskResponse::~DiskResponse() {
  // @@protoc_insertion_point(destructor:mon.DiskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void DiskResponse::ArenaDtor(void* object) {
  DiskResponse* _this = reinterpret_cast< DiskResponse* >(object);
  (void)_this;
}
void DiskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.DiskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mon.DiskResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mon.DiskValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.DiskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mon.DiskResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mon.DiskValue value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.DiskResponse)
  return target;
}

size_t DiskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.DiskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mon.DiskValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskResponse::GetClassData() const { return &_class_data_; }

void DiskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiskResponse *>(to)->MergeFrom(
      static_cast<const DiskResponse &>(from));
}


void DiskResponse::MergeFrom(const DiskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.DiskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mon::DiskValue::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskResponse::CopyFrom(const DiskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.DiskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskResponse::IsInitialized() const {
  return true;
}

void DiskResponse::InternalSwap(DiskResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[1]);
}

// ===================================================================

class AllDiskResponse::_Internal {
 public:
};

AllDiskResponse::AllDiskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resp_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.AllDiskResponse)
}
AllDiskResponse::AllDiskResponse(const AllDiskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resp_(from.resp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mon.AllDiskResponse)
}

void AllDiskResponse::SharedCtor() {
}

AllDiskResponse::~AllDiskResponse() {
  // @@protoc_insertion_point(destructor:mon.AllDiskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllDiskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllDiskResponse::ArenaDtor(void* object) {
  AllDiskResponse* _this = reinterpret_cast< AllDiskResponse* >(object);
  (void)_this;
}
void AllDiskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllDiskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllDiskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.AllDiskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDiskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mon.DiskResponse resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllDiskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.AllDiskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mon.DiskResponse resp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resp(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.AllDiskResponse)
  return target;
}

size_t AllDiskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.AllDiskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mon.DiskResponse resp = 1;
  total_size += 1UL * this->_internal_resp_size();
  for (const auto& msg : this->resp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllDiskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllDiskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllDiskResponse::GetClassData() const { return &_class_data_; }

void AllDiskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllDiskResponse *>(to)->MergeFrom(
      static_cast<const AllDiskResponse &>(from));
}


void AllDiskResponse::MergeFrom(const AllDiskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.AllDiskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resp_.MergeFrom(from.resp_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllDiskResponse::CopyFrom(const AllDiskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.AllDiskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDiskResponse::IsInitialized() const {
  return true;
}

void AllDiskResponse::InternalSwap(AllDiskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resp_.InternalSwap(&other->resp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDiskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[2]);
}

// ===================================================================

class DiskQ::_Internal {
 public:
};

DiskQ::DiskQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.DiskQ)
}
DiskQ::DiskQ(const DiskQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mon.DiskQ)
}

void DiskQ::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiskQ::~DiskQ() {
  // @@protoc_insertion_point(destructor:mon.DiskQ)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiskQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiskQ::ArenaDtor(void* object) {
  DiskQ* _this = reinterpret_cast< DiskQ* >(object);
  (void)_this;
}
void DiskQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskQ::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.DiskQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mon.DiskQ.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiskQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.DiskQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mon.DiskQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.DiskQ)
  return target;
}

size_t DiskQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.DiskQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiskQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskQ::GetClassData() const { return &_class_data_; }

void DiskQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiskQ *>(to)->MergeFrom(
      static_cast<const DiskQ &>(from));
}


void DiskQ::MergeFrom(const DiskQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.DiskQ)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskQ::CopyFrom(const DiskQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.DiskQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskQ::IsInitialized() const {
  return true;
}

void DiskQ::InternalSwap(DiskQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskQ::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[3]);
}

// ===================================================================

class IfaceQ::_Internal {
 public:
};

IfaceQ::IfaceQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.IfaceQ)
}
IfaceQ::IfaceQ(const IfaceQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mon.IfaceQ)
}

void IfaceQ::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IfaceQ::~IfaceQ() {
  // @@protoc_insertion_point(destructor:mon.IfaceQ)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IfaceQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IfaceQ::ArenaDtor(void* object) {
  IfaceQ* _this = reinterpret_cast< IfaceQ* >(object);
  (void)_this;
}
void IfaceQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IfaceQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IfaceQ::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.IfaceQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IfaceQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mon.IfaceQ.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IfaceQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.IfaceQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mon.IfaceQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.IfaceQ)
  return target;
}

size_t IfaceQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.IfaceQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IfaceQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IfaceQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IfaceQ::GetClassData() const { return &_class_data_; }

void IfaceQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IfaceQ *>(to)->MergeFrom(
      static_cast<const IfaceQ &>(from));
}


void IfaceQ::MergeFrom(const IfaceQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.IfaceQ)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IfaceQ::CopyFrom(const IfaceQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.IfaceQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfaceQ::IsInitialized() const {
  return true;
}

void IfaceQ::InternalSwap(IfaceQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IfaceQ::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[4]);
}

// ===================================================================

class IfaceValue::_Internal {
 public:
};

IfaceValue::IfaceValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.IfaceValue)
}
IfaceValue::IfaceValue(const IfaceValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&rw_) -
    reinterpret_cast<char*>(&r_)) + sizeof(rw_));
  // @@protoc_insertion_point(copy_constructor:mon.IfaceValue)
}

void IfaceValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rw_) -
    reinterpret_cast<char*>(&r_)) + sizeof(rw_));
}

IfaceValue::~IfaceValue() {
  // @@protoc_insertion_point(destructor:mon.IfaceValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IfaceValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IfaceValue::ArenaDtor(void* object) {
  IfaceValue* _this = reinterpret_cast< IfaceValue* >(object);
  (void)_this;
}
void IfaceValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IfaceValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IfaceValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.IfaceValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rw_) -
      reinterpret_cast<char*>(&r_)) + sizeof(rw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IfaceValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IfaceValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.IfaceValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_r(), target);
  }

  // int64 w = 2;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_w(), target);
  }

  // int64 rw = 3;
  if (this->_internal_rw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_rw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.IfaceValue)
  return target;
}

size_t IfaceValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.IfaceValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_r());
  }

  // int64 w = 2;
  if (this->_internal_w() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_w());
  }

  // int64 rw = 3;
  if (this->_internal_rw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_rw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IfaceValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IfaceValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IfaceValue::GetClassData() const { return &_class_data_; }

void IfaceValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IfaceValue *>(to)->MergeFrom(
      static_cast<const IfaceValue &>(from));
}


void IfaceValue::MergeFrom(const IfaceValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.IfaceValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from._internal_w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from._internal_rw() != 0) {
    _internal_set_rw(from._internal_rw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IfaceValue::CopyFrom(const IfaceValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.IfaceValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfaceValue::IsInitialized() const {
  return true;
}

void IfaceValue::InternalSwap(IfaceValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IfaceValue, rw_)
      + sizeof(IfaceValue::rw_)
      - PROTOBUF_FIELD_OFFSET(IfaceValue, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IfaceValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[5]);
}

// ===================================================================

class IfaceResponse::_Internal {
 public:
  static const ::mon::IfaceValue& value(const IfaceResponse* msg);
};

const ::mon::IfaceValue&
IfaceResponse::_Internal::value(const IfaceResponse* msg) {
  return *msg->value_;
}
IfaceResponse::IfaceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.IfaceResponse)
}
IfaceResponse::IfaceResponse(const IfaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::mon::IfaceValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mon.IfaceResponse)
}

void IfaceResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

IfaceResponse::~IfaceResponse() {
  // @@protoc_insertion_point(destructor:mon.IfaceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IfaceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void IfaceResponse::ArenaDtor(void* object) {
  IfaceResponse* _this = reinterpret_cast< IfaceResponse* >(object);
  (void)_this;
}
void IfaceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IfaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IfaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.IfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IfaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mon.IfaceResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mon.IfaceValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IfaceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.IfaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mon.IfaceResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .mon.IfaceValue value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.IfaceResponse)
  return target;
}

size_t IfaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.IfaceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .mon.IfaceValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IfaceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IfaceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IfaceResponse::GetClassData() const { return &_class_data_; }

void IfaceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IfaceResponse *>(to)->MergeFrom(
      static_cast<const IfaceResponse &>(from));
}


void IfaceResponse::MergeFrom(const IfaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.IfaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mon::IfaceValue::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IfaceResponse::CopyFrom(const IfaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.IfaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfaceResponse::IsInitialized() const {
  return true;
}

void IfaceResponse::InternalSwap(IfaceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IfaceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[6]);
}

// ===================================================================

class AllIfaceResponses::_Internal {
 public:
};

AllIfaceResponses::AllIfaceResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  iface_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.AllIfaceResponses)
}
AllIfaceResponses::AllIfaceResponses(const AllIfaceResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      iface_(from.iface_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mon.AllIfaceResponses)
}

void AllIfaceResponses::SharedCtor() {
}

AllIfaceResponses::~AllIfaceResponses() {
  // @@protoc_insertion_point(destructor:mon.AllIfaceResponses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllIfaceResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllIfaceResponses::ArenaDtor(void* object) {
  AllIfaceResponses* _this = reinterpret_cast< AllIfaceResponses* >(object);
  (void)_this;
}
void AllIfaceResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllIfaceResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllIfaceResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.AllIfaceResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllIfaceResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mon.IfaceResponse iface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_iface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllIfaceResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.AllIfaceResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mon.IfaceResponse iface = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_iface_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_iface(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.AllIfaceResponses)
  return target;
}

size_t AllIfaceResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.AllIfaceResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mon.IfaceResponse iface = 1;
  total_size += 1UL * this->_internal_iface_size();
  for (const auto& msg : this->iface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllIfaceResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllIfaceResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllIfaceResponses::GetClassData() const { return &_class_data_; }

void AllIfaceResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllIfaceResponses *>(to)->MergeFrom(
      static_cast<const AllIfaceResponses &>(from));
}


void AllIfaceResponses::MergeFrom(const AllIfaceResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.AllIfaceResponses)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iface_.MergeFrom(from.iface_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllIfaceResponses::CopyFrom(const AllIfaceResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.AllIfaceResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllIfaceResponses::IsInitialized() const {
  return true;
}

void AllIfaceResponses::InternalSwap(AllIfaceResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  iface_.InternalSwap(&other->iface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllIfaceResponses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[7]);
}

// ===================================================================

class FreeMemory::_Internal {
 public:
};

FreeMemory::FreeMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.FreeMemory)
}
FreeMemory::FreeMemory(const FreeMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mon.FreeMemory)
}

void FreeMemory::SharedCtor() {
value_ = int64_t{0};
}

FreeMemory::~FreeMemory() {
  // @@protoc_insertion_point(destructor:mon.FreeMemory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FreeMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FreeMemory::ArenaDtor(void* object) {
  FreeMemory* _this = reinterpret_cast< FreeMemory* >(object);
  (void)_this;
}
void FreeMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreeMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreeMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.FreeMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreeMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.FreeMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.FreeMemory)
  return target;
}

size_t FreeMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.FreeMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreeMemory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FreeMemory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreeMemory::GetClassData() const { return &_class_data_; }

void FreeMemory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FreeMemory *>(to)->MergeFrom(
      static_cast<const FreeMemory &>(from));
}


void FreeMemory::MergeFrom(const FreeMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.FreeMemory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreeMemory::CopyFrom(const FreeMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.FreeMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeMemory::IsInitialized() const {
  return true;
}

void FreeMemory::InternalSwap(FreeMemory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeMemory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[8]);
}

// ===================================================================

class UsedMemory::_Internal {
 public:
};

UsedMemory::UsedMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.UsedMemory)
}
UsedMemory::UsedMemory(const UsedMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mon.UsedMemory)
}

void UsedMemory::SharedCtor() {
value_ = int64_t{0};
}

UsedMemory::~UsedMemory() {
  // @@protoc_insertion_point(destructor:mon.UsedMemory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsedMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UsedMemory::ArenaDtor(void* object) {
  UsedMemory* _this = reinterpret_cast< UsedMemory* >(object);
  (void)_this;
}
void UsedMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsedMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsedMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.UsedMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsedMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsedMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.UsedMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.UsedMemory)
  return target;
}

size_t UsedMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.UsedMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsedMemory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsedMemory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsedMemory::GetClassData() const { return &_class_data_; }

void UsedMemory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UsedMemory *>(to)->MergeFrom(
      static_cast<const UsedMemory &>(from));
}


void UsedMemory::MergeFrom(const UsedMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.UsedMemory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsedMemory::CopyFrom(const UsedMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.UsedMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedMemory::IsInitialized() const {
  return true;
}

void UsedMemory::InternalSwap(UsedMemory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsedMemory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[9]);
}

// ===================================================================

class CachedMemory::_Internal {
 public:
};

CachedMemory::CachedMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.CachedMemory)
}
CachedMemory::CachedMemory(const CachedMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mon.CachedMemory)
}

void CachedMemory::SharedCtor() {
value_ = int64_t{0};
}

CachedMemory::~CachedMemory() {
  // @@protoc_insertion_point(destructor:mon.CachedMemory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CachedMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CachedMemory::ArenaDtor(void* object) {
  CachedMemory* _this = reinterpret_cast< CachedMemory* >(object);
  (void)_this;
}
void CachedMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CachedMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CachedMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.CachedMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CachedMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CachedMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.CachedMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.CachedMemory)
  return target;
}

size_t CachedMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.CachedMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CachedMemory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CachedMemory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CachedMemory::GetClassData() const { return &_class_data_; }

void CachedMemory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CachedMemory *>(to)->MergeFrom(
      static_cast<const CachedMemory &>(from));
}


void CachedMemory::MergeFrom(const CachedMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.CachedMemory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CachedMemory::CopyFrom(const CachedMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.CachedMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedMemory::IsInitialized() const {
  return true;
}

void CachedMemory::InternalSwap(CachedMemory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CachedMemory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[10]);
}

// ===================================================================

class SwapMemory::_Internal {
 public:
};

SwapMemory::SwapMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.SwapMemory)
}
SwapMemory::SwapMemory(const SwapMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mon.SwapMemory)
}

void SwapMemory::SharedCtor() {
value_ = int64_t{0};
}

SwapMemory::~SwapMemory() {
  // @@protoc_insertion_point(destructor:mon.SwapMemory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwapMemory::ArenaDtor(void* object) {
  SwapMemory* _this = reinterpret_cast< SwapMemory* >(object);
  (void)_this;
}
void SwapMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.SwapMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.SwapMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.SwapMemory)
  return target;
}

size_t SwapMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.SwapMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapMemory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapMemory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapMemory::GetClassData() const { return &_class_data_; }

void SwapMemory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SwapMemory *>(to)->MergeFrom(
      static_cast<const SwapMemory &>(from));
}


void SwapMemory::MergeFrom(const SwapMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.SwapMemory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapMemory::CopyFrom(const SwapMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.SwapMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapMemory::IsInitialized() const {
  return true;
}

void SwapMemory::InternalSwap(SwapMemory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapMemory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[11]);
}

// ===================================================================

class TotalMemory::_Internal {
 public:
};

TotalMemory::TotalMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.TotalMemory)
}
TotalMemory::TotalMemory(const TotalMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mon.TotalMemory)
}

void TotalMemory::SharedCtor() {
value_ = int64_t{0};
}

TotalMemory::~TotalMemory() {
  // @@protoc_insertion_point(destructor:mon.TotalMemory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TotalMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TotalMemory::ArenaDtor(void* object) {
  TotalMemory* _this = reinterpret_cast< TotalMemory* >(object);
  (void)_this;
}
void TotalMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TotalMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TotalMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.TotalMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TotalMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TotalMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.TotalMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.TotalMemory)
  return target;
}

size_t TotalMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.TotalMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TotalMemory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TotalMemory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TotalMemory::GetClassData() const { return &_class_data_; }

void TotalMemory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TotalMemory *>(to)->MergeFrom(
      static_cast<const TotalMemory &>(from));
}


void TotalMemory::MergeFrom(const TotalMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.TotalMemory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TotalMemory::CopyFrom(const TotalMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.TotalMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalMemory::IsInitialized() const {
  return true;
}

void TotalMemory::InternalSwap(TotalMemory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TotalMemory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[12]);
}

// ===================================================================

class CpuResponse::_Internal {
 public:
};

CpuResponse::CpuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mon.CpuResponse)
}
CpuResponse::CpuResponse(const CpuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mon.CpuResponse)
}

void CpuResponse::SharedCtor() {
}

CpuResponse::~CpuResponse() {
  // @@protoc_insertion_point(destructor:mon.CpuResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CpuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuResponse::ArenaDtor(void* object) {
  CpuResponse* _this = reinterpret_cast< CpuResponse* >(object);
  (void)_this;
}
void CpuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CpuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mon.CpuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mon.CpuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mon.CpuResponse)
  return target;
}

size_t CpuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mon.CpuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CpuResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuResponse::GetClassData() const { return &_class_data_; }

void CpuResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CpuResponse *>(to)->MergeFrom(
      static_cast<const CpuResponse &>(from));
}


void CpuResponse::MergeFrom(const CpuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mon.CpuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuResponse::CopyFrom(const CpuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mon.CpuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuResponse::IsInitialized() const {
  return true;
}

void CpuResponse::InternalSwap(CpuResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_monitoring_2eproto_getter, &descriptor_table_monitoring_2eproto_once,
      file_level_metadata_monitoring_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mon::DiskValue* Arena::CreateMaybeMessage< ::mon::DiskValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::DiskValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::DiskResponse* Arena::CreateMaybeMessage< ::mon::DiskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::DiskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::AllDiskResponse* Arena::CreateMaybeMessage< ::mon::AllDiskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::AllDiskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::DiskQ* Arena::CreateMaybeMessage< ::mon::DiskQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::DiskQ >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::IfaceQ* Arena::CreateMaybeMessage< ::mon::IfaceQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::IfaceQ >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::IfaceValue* Arena::CreateMaybeMessage< ::mon::IfaceValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::IfaceValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::IfaceResponse* Arena::CreateMaybeMessage< ::mon::IfaceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::IfaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::AllIfaceResponses* Arena::CreateMaybeMessage< ::mon::AllIfaceResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::AllIfaceResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::FreeMemory* Arena::CreateMaybeMessage< ::mon::FreeMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::FreeMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::UsedMemory* Arena::CreateMaybeMessage< ::mon::UsedMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::UsedMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::CachedMemory* Arena::CreateMaybeMessage< ::mon::CachedMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::CachedMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::SwapMemory* Arena::CreateMaybeMessage< ::mon::SwapMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::SwapMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::TotalMemory* Arena::CreateMaybeMessage< ::mon::TotalMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::TotalMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::mon::CpuResponse* Arena::CreateMaybeMessage< ::mon::CpuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mon::CpuResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
