// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: monitoring.proto

#include "monitoring.pb.h"
#include "monitoring.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mon {

static const char* DiskMonitoring_method_names[] = {
  "/mon.DiskMonitoring/GetBPS",
  "/mon.DiskMonitoring/GetDiskBPS",
  "/mon.DiskMonitoring/GetIOPS",
  "/mon.DiskMonitoring/GetDiskIOPS",
  "/mon.DiskMonitoring/GetRequestSizeInBytesPerRead",
  "/mon.DiskMonitoring/GetDiskRequestSizeInBytesPerRead",
};

std::unique_ptr< DiskMonitoring::Stub> DiskMonitoring::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DiskMonitoring::Stub> stub(new DiskMonitoring::Stub(channel, options));
  return stub;
}

DiskMonitoring::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBPS_(DiskMonitoring_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDiskBPS_(DiskMonitoring_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIOPS_(DiskMonitoring_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDiskIOPS_(DiskMonitoring_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRequestSizeInBytesPerRead_(DiskMonitoring_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDiskRequestSizeInBytesPerRead_(DiskMonitoring_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DiskMonitoring::Stub::GetBPS(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::AllDiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBPS_, context, request, response);
}

void DiskMonitoring::Stub::async::GetBPS(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBPS_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetBPS(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBPS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetBPSRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::AllDiskResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBPS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::AsyncGetBPSRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBPSRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiskMonitoring::Stub::GetDiskBPS(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::mon::DiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDiskBPS_, context, request, response);
}

void DiskMonitoring::Stub::async::GetDiskBPS(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskBPS_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetDiskBPS(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskBPS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetDiskBPSRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::DiskResponse, ::mon::DiskQ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDiskBPS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::AsyncGetDiskBPSRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDiskBPSRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiskMonitoring::Stub::GetIOPS(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::AllDiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIOPS_, context, request, response);
}

void DiskMonitoring::Stub::async::GetIOPS(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOPS_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetIOPS(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOPS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetIOPSRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::AllDiskResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIOPS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::AsyncGetIOPSRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIOPSRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiskMonitoring::Stub::GetDiskIOPS(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::mon::DiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDiskIOPS_, context, request, response);
}

void DiskMonitoring::Stub::async::GetDiskIOPS(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskIOPS_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetDiskIOPS(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskIOPS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetDiskIOPSRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::DiskResponse, ::mon::DiskQ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDiskIOPS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::AsyncGetDiskIOPSRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDiskIOPSRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiskMonitoring::Stub::GetRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::AllDiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRequestSizeInBytesPerRead_, context, request, response);
}

void DiskMonitoring::Stub::async::GetRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRequestSizeInBytesPerRead_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRequestSizeInBytesPerRead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetRequestSizeInBytesPerReadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::AllDiskResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRequestSizeInBytesPerRead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::AllDiskResponse>* DiskMonitoring::Stub::AsyncGetRequestSizeInBytesPerReadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRequestSizeInBytesPerReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiskMonitoring::Stub::GetDiskRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::mon::DiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDiskRequestSizeInBytesPerRead_, context, request, response);
}

void DiskMonitoring::Stub::async::GetDiskRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskRequestSizeInBytesPerRead_, context, request, response, std::move(f));
}

void DiskMonitoring::Stub::async::GetDiskRequestSizeInBytesPerRead(::grpc::ClientContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskRequestSizeInBytesPerRead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::PrepareAsyncGetDiskRequestSizeInBytesPerReadRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::DiskResponse, ::mon::DiskQ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDiskRequestSizeInBytesPerRead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::DiskResponse>* DiskMonitoring::Stub::AsyncGetDiskRequestSizeInBytesPerReadRaw(::grpc::ClientContext* context, const ::mon::DiskQ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDiskRequestSizeInBytesPerReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

DiskMonitoring::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::AllDiskResponse* resp) {
               return service->GetBPS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mon::DiskQ* req,
             ::mon::DiskResponse* resp) {
               return service->GetDiskBPS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::AllDiskResponse* resp) {
               return service->GetIOPS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mon::DiskQ* req,
             ::mon::DiskResponse* resp) {
               return service->GetDiskIOPS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::google::protobuf::Empty, ::mon::AllDiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::AllDiskResponse* resp) {
               return service->GetRequestSizeInBytesPerRead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiskMonitoring_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiskMonitoring::Service, ::mon::DiskQ, ::mon::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiskMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mon::DiskQ* req,
             ::mon::DiskResponse* resp) {
               return service->GetDiskRequestSizeInBytesPerRead(ctx, req, resp);
             }, this)));
}

DiskMonitoring::Service::~Service() {
}

::grpc::Status DiskMonitoring::Service::GetBPS(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiskMonitoring::Service::GetDiskBPS(::grpc::ServerContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiskMonitoring::Service::GetIOPS(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiskMonitoring::Service::GetDiskIOPS(::grpc::ServerContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiskMonitoring::Service::GetRequestSizeInBytesPerRead(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::AllDiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiskMonitoring::Service::GetDiskRequestSizeInBytesPerRead(::grpc::ServerContext* context, const ::mon::DiskQ* request, ::mon::DiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NetworkMonitoring_method_names[] = {
  "/mon.NetworkMonitoring/GetBytesPerSecond",
  "/mon.NetworkMonitoring/GetIfaceBytesPerSecond",
  "/mon.NetworkMonitoring/GetPacketsPerSecond",
  "/mon.NetworkMonitoring/GetIfacePacketsPerSecond",
};

std::unique_ptr< NetworkMonitoring::Stub> NetworkMonitoring::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkMonitoring::Stub> stub(new NetworkMonitoring::Stub(channel, options));
  return stub;
}

NetworkMonitoring::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBytesPerSecond_(NetworkMonitoring_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIfaceBytesPerSecond_(NetworkMonitoring_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPacketsPerSecond_(NetworkMonitoring_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIfacePacketsPerSecond_(NetworkMonitoring_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetworkMonitoring::Stub::GetBytesPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::AllIfaceResponses* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBytesPerSecond_, context, request, response);
}

void NetworkMonitoring::Stub::async::GetBytesPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBytesPerSecond_, context, request, response, std::move(f));
}

void NetworkMonitoring::Stub::async::GetBytesPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBytesPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::AllIfaceResponses>* NetworkMonitoring::Stub::PrepareAsyncGetBytesPerSecondRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::AllIfaceResponses, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBytesPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::AllIfaceResponses>* NetworkMonitoring::Stub::AsyncGetBytesPerSecondRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBytesPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkMonitoring::Stub::GetIfaceBytesPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::mon::IfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIfaceBytesPerSecond_, context, request, response);
}

void NetworkMonitoring::Stub::async::GetIfaceBytesPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIfaceBytesPerSecond_, context, request, response, std::move(f));
}

void NetworkMonitoring::Stub::async::GetIfaceBytesPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIfaceBytesPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::IfaceResponse>* NetworkMonitoring::Stub::PrepareAsyncGetIfaceBytesPerSecondRaw(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::IfaceResponse, ::mon::IfaceQ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIfaceBytesPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::IfaceResponse>* NetworkMonitoring::Stub::AsyncGetIfaceBytesPerSecondRaw(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIfaceBytesPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkMonitoring::Stub::GetPacketsPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::AllIfaceResponses* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPacketsPerSecond_, context, request, response);
}

void NetworkMonitoring::Stub::async::GetPacketsPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPacketsPerSecond_, context, request, response, std::move(f));
}

void NetworkMonitoring::Stub::async::GetPacketsPerSecond(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPacketsPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::AllIfaceResponses>* NetworkMonitoring::Stub::PrepareAsyncGetPacketsPerSecondRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::AllIfaceResponses, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPacketsPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::AllIfaceResponses>* NetworkMonitoring::Stub::AsyncGetPacketsPerSecondRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPacketsPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkMonitoring::Stub::GetIfacePacketsPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::mon::IfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIfacePacketsPerSecond_, context, request, response);
}

void NetworkMonitoring::Stub::async::GetIfacePacketsPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIfacePacketsPerSecond_, context, request, response, std::move(f));
}

void NetworkMonitoring::Stub::async::GetIfacePacketsPerSecond(::grpc::ClientContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIfacePacketsPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::IfaceResponse>* NetworkMonitoring::Stub::PrepareAsyncGetIfacePacketsPerSecondRaw(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::IfaceResponse, ::mon::IfaceQ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIfacePacketsPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::IfaceResponse>* NetworkMonitoring::Stub::AsyncGetIfacePacketsPerSecondRaw(::grpc::ClientContext* context, const ::mon::IfaceQ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIfacePacketsPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetworkMonitoring::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkMonitoring_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkMonitoring::Service, ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::AllIfaceResponses* resp) {
               return service->GetBytesPerSecond(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkMonitoring_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkMonitoring::Service, ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mon::IfaceQ* req,
             ::mon::IfaceResponse* resp) {
               return service->GetIfaceBytesPerSecond(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkMonitoring_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkMonitoring::Service, ::google::protobuf::Empty, ::mon::AllIfaceResponses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::AllIfaceResponses* resp) {
               return service->GetPacketsPerSecond(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkMonitoring_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkMonitoring::Service, ::mon::IfaceQ, ::mon::IfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mon::IfaceQ* req,
             ::mon::IfaceResponse* resp) {
               return service->GetIfacePacketsPerSecond(ctx, req, resp);
             }, this)));
}

NetworkMonitoring::Service::~Service() {
}

::grpc::Status NetworkMonitoring::Service::GetBytesPerSecond(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkMonitoring::Service::GetIfaceBytesPerSecond(::grpc::ServerContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkMonitoring::Service::GetPacketsPerSecond(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::AllIfaceResponses* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkMonitoring::Service::GetIfacePacketsPerSecond(::grpc::ServerContext* context, const ::mon::IfaceQ* request, ::mon::IfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MemoryMonitoring_method_names[] = {
  "/mon.MemoryMonitoring/GetFreeMemory",
  "/mon.MemoryMonitoring/GetUsedMemory",
  "/mon.MemoryMonitoring/GetCachedMemory",
  "/mon.MemoryMonitoring/GetSwapMemory",
  "/mon.MemoryMonitoring/GetTotalMemory",
};

std::unique_ptr< MemoryMonitoring::Stub> MemoryMonitoring::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MemoryMonitoring::Stub> stub(new MemoryMonitoring::Stub(channel, options));
  return stub;
}

MemoryMonitoring::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetFreeMemory_(MemoryMonitoring_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsedMemory_(MemoryMonitoring_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCachedMemory_(MemoryMonitoring_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwapMemory_(MemoryMonitoring_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTotalMemory_(MemoryMonitoring_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MemoryMonitoring::Stub::GetFreeMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::FreeMemory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::FreeMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFreeMemory_, context, request, response);
}

void MemoryMonitoring::Stub::async::GetFreeMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::FreeMemory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::FreeMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeMemory_, context, request, response, std::move(f));
}

void MemoryMonitoring::Stub::async::GetFreeMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::FreeMemory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::FreeMemory>* MemoryMonitoring::Stub::PrepareAsyncGetFreeMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::FreeMemory, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFreeMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::FreeMemory>* MemoryMonitoring::Stub::AsyncGetFreeMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFreeMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MemoryMonitoring::Stub::GetUsedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::UsedMemory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::UsedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsedMemory_, context, request, response);
}

void MemoryMonitoring::Stub::async::GetUsedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::UsedMemory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::UsedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsedMemory_, context, request, response, std::move(f));
}

void MemoryMonitoring::Stub::async::GetUsedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::UsedMemory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsedMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::UsedMemory>* MemoryMonitoring::Stub::PrepareAsyncGetUsedMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::UsedMemory, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsedMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::UsedMemory>* MemoryMonitoring::Stub::AsyncGetUsedMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsedMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MemoryMonitoring::Stub::GetCachedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::CachedMemory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::CachedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCachedMemory_, context, request, response);
}

void MemoryMonitoring::Stub::async::GetCachedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::CachedMemory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::CachedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCachedMemory_, context, request, response, std::move(f));
}

void MemoryMonitoring::Stub::async::GetCachedMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::CachedMemory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCachedMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::CachedMemory>* MemoryMonitoring::Stub::PrepareAsyncGetCachedMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::CachedMemory, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCachedMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::CachedMemory>* MemoryMonitoring::Stub::AsyncGetCachedMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCachedMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MemoryMonitoring::Stub::GetSwapMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::SwapMemory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::SwapMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwapMemory_, context, request, response);
}

void MemoryMonitoring::Stub::async::GetSwapMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::SwapMemory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::SwapMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwapMemory_, context, request, response, std::move(f));
}

void MemoryMonitoring::Stub::async::GetSwapMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::SwapMemory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwapMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::SwapMemory>* MemoryMonitoring::Stub::PrepareAsyncGetSwapMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::SwapMemory, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwapMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::SwapMemory>* MemoryMonitoring::Stub::AsyncGetSwapMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwapMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MemoryMonitoring::Stub::GetTotalMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::TotalMemory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::TotalMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTotalMemory_, context, request, response);
}

void MemoryMonitoring::Stub::async::GetTotalMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::TotalMemory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::TotalMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTotalMemory_, context, request, response, std::move(f));
}

void MemoryMonitoring::Stub::async::GetTotalMemory(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::TotalMemory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTotalMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::TotalMemory>* MemoryMonitoring::Stub::PrepareAsyncGetTotalMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::TotalMemory, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTotalMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::TotalMemory>* MemoryMonitoring::Stub::AsyncGetTotalMemoryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTotalMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

MemoryMonitoring::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MemoryMonitoring_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MemoryMonitoring::Service, ::google::protobuf::Empty, ::mon::FreeMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MemoryMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::FreeMemory* resp) {
               return service->GetFreeMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MemoryMonitoring_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MemoryMonitoring::Service, ::google::protobuf::Empty, ::mon::UsedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MemoryMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::UsedMemory* resp) {
               return service->GetUsedMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MemoryMonitoring_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MemoryMonitoring::Service, ::google::protobuf::Empty, ::mon::CachedMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MemoryMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::CachedMemory* resp) {
               return service->GetCachedMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MemoryMonitoring_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MemoryMonitoring::Service, ::google::protobuf::Empty, ::mon::SwapMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MemoryMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::SwapMemory* resp) {
               return service->GetSwapMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MemoryMonitoring_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MemoryMonitoring::Service, ::google::protobuf::Empty, ::mon::TotalMemory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MemoryMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::TotalMemory* resp) {
               return service->GetTotalMemory(ctx, req, resp);
             }, this)));
}

MemoryMonitoring::Service::~Service() {
}

::grpc::Status MemoryMonitoring::Service::GetFreeMemory(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::FreeMemory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MemoryMonitoring::Service::GetUsedMemory(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::UsedMemory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MemoryMonitoring::Service::GetCachedMemory(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::CachedMemory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MemoryMonitoring::Service::GetSwapMemory(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::SwapMemory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MemoryMonitoring::Service::GetTotalMemory(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::TotalMemory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CpuMonitoring_method_names[] = {
  "/mon.CpuMonitoring/GetUsagePercentage",
};

std::unique_ptr< CpuMonitoring::Stub> CpuMonitoring::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CpuMonitoring::Stub> stub(new CpuMonitoring::Stub(channel, options));
  return stub;
}

CpuMonitoring::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUsagePercentage_(CpuMonitoring_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CpuMonitoring::Stub::GetUsagePercentage(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mon::CpuResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::mon::CpuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsagePercentage_, context, request, response);
}

void CpuMonitoring::Stub::async::GetUsagePercentage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::CpuResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::mon::CpuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsagePercentage_, context, request, response, std::move(f));
}

void CpuMonitoring::Stub::async::GetUsagePercentage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mon::CpuResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsagePercentage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mon::CpuResponse>* CpuMonitoring::Stub::PrepareAsyncGetUsagePercentageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mon::CpuResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsagePercentage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mon::CpuResponse>* CpuMonitoring::Stub::AsyncGetUsagePercentageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsagePercentageRaw(context, request, cq);
  result->StartCall();
  return result;
}

CpuMonitoring::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CpuMonitoring_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CpuMonitoring::Service, ::google::protobuf::Empty, ::mon::CpuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CpuMonitoring::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::mon::CpuResponse* resp) {
               return service->GetUsagePercentage(ctx, req, resp);
             }, this)));
}

CpuMonitoring::Service::~Service() {
}

::grpc::Status CpuMonitoring::Service::GetUsagePercentage(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mon::CpuResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mon

